# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
    - build
    - package
    - e2e
    - cleanup


build:   # This job runs in the build stage, which runs first.
  stage: build
  image: python:3.10-slim-bullseye 
  script:
    - pip install pipenv
    - pipenv install --dev
    - pipenv install build
    - pipenv run python3 -m build
  artifacts:
    paths:
        - dist
    expire_in: 1 hour

containerize:
    stage: package
    image: docker:20.10.15-dind
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    script:
        - docker-compose build #-t ${CI_REGISTRY_IMAGE}/gcd:${CI_COMMIT_REF_SLUG}
        - docker-compose push #${CI_REGISTRY_IMAGE}/connect4:${CI_COMMIT_REF_SLUG}
    after_script:
        - docker rmi ${CI_REGISTRY_IMAGE}/connect4:latest #${CI_COMMIT_REF_SLUG}

e2e-test:
    stage: e2e
    image: docker:20.10.15-dind
    variables:
      CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}/connect4:latest #${CI_COMMIT_REF_SLUG}
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    script:
        - apk add --update python3
        - python3 -m ensurepip
        - pip3 install pipenv
        - pipenv install behave
        - pipenv install pexpect
        - pipenv install --dev
        - pipenv run behave
    after_script:
        - docker rmi ${CI_REGISTRY_IMAGE}/connect4:latest #${CI_COMMIT_REF_SLUG}

remove-container:
    stage: cleanup
    image: docker:20.10.15-dind
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    script:
        - wget -O /usr/bin/reg https://github.com/genuinetools/reg/releases/download/v0.16.0/reg-linux-amd64
        - chmod +x /usr/bin/reg
        - reg rm ${CI_REGISTRY_IMAGE}/gcd:${CI_COMMIT_REF_SLUG}
    except:
        variables:
            - $CI_COMMIT_TAG


        

